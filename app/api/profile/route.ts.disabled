import { auth } from "@/lib/auth/config";
import { NextRequest } from "next/server";
import { prisma } from "@/lib/db/prisma";
import bcrypt from "bcryptjs";
import {
  UpdateProfileSchema,
  ChangePasswordSchema,
} from "@/lib/api/schemas/profile";
import {
  handleAPIError,
  AuthenticationError,
  NotFoundError,
  ValidationError,
} from "@/lib/api/handlers/errors";
import { successResponse, createdResponse } from "@/lib/api/handlers/response";
import { log } from "@/lib/logger";

/**
 * GET /api/profile
 * Dohvata profil sa statistikom
 */
export async function GET(request: NextRequest) {
  try {
    // Autentifikacija
    const session = await auth();
    if (!session?.user?.id) {
      throw new AuthenticationError();
    }

    // Dohvati korisnika
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      include: {
        student: true,
        guardian: {
          include: {
            links: {
              where: { isActive: true },
              include: {
                student: {
                  select: { id: true, name: true, school: true, grade: true },
                },
              },
            },
          },
        },
      },
    });

    if (!user) {
      throw new NotFoundError("Korisnik");
    }

    // Prikupi sve dostupne studente
    const students = [];
    if (user.student) {
      students.push({
        id: user.student.id,
        name: user.student.name,
        school: user.student.school,
        grade: user.student.grade,
      });
    }
    if (user.guardian?.links) {
      user.guardian.links.forEach((link) => {
        students.push(link.student);
      });
    }

    // Ako je student, dohvati njegov profil
    let studentData = students[0];
    const queryStudentId = request.nextUrl.searchParams.get("studentId");

    if (queryStudentId && students.length > 1) {
      const found = students.find((s) => s.id === queryStudentId);
      if (!found) {
        throw new NotFoundError("Učenik");
      }
      studentData = found;
    }

    // Dohvati statistiku
    const homework = await prisma.homework.findMany({
      where: { studentId: studentData.id },
    });

    const grades = await prisma.grade.findMany({
      where: { studentId: studentData.id },
    });

    const schedules = await prisma.scheduleEntry.findMany({
      where: { studentId: studentData.id },
    });

    const completedHomework = homework.filter(
      (h) => h.status === "DONE" || h.status === "SUBMITTED",
    ).length;

    const gradeValues = grades.map((g) => parseInt(g.grade));
    const averageGrade =
      gradeValues.length > 0
        ? gradeValues.reduce((a, b) => a + b) / gradeValues.length
        : 0;

    const profileData = {
      id: user.id,
      name: user.name,
      email: user.email,
      avatar: user.avatar,
      dateOfBirth: user.dateOfBirth,
      gender: user.gender,
      school: studentData?.school,
      grade: studentData?.grade,
      bio: user.bio,
      role: user.role,
      xp: user.xp || 0,
      level: Math.floor((user.xp || 0) / 1000) + 1,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
    };

    const stats = {
      totalHomework: homework.length,
      completedHomework: completedHomework,
      averageGrade: Math.round(averageGrade * 100) / 100,
      totalClasses: schedules.length,
      attendanceRate: 95, // TODO: Implementiraj praćenje prisustva
      xpThisMonth: user.xp || 0, // TODO: Implementiraj praćenje XP po mjesecu
      achievements: [], // TODO: Implementiraj achievement sistem
    };

    log.info("Fetched profile", {
      userId: session.user.id,
      studentId: studentData.id,
    });

    return successResponse({
      profile: profileData,
      stats,
    });
  } catch (error) {
    return handleAPIError(error);
  }
}

/**
 * PUT /api/profile
 * Ažurira profil korisnika
 */
export async function PUT(request: NextRequest) {
  try {
    // Autentifikacija
    const session = await auth();
    if (!session?.user?.id) {
      throw new AuthenticationError();
    }

    // Parse body
    const body = await request.json();

    // Validacija
    const validatedData = UpdateProfileSchema.parse(body);

    // Ažuriraj korisnika
    const updated = await prisma.user.update({
      where: { id: session.user.id },
      data: {
        ...(validatedData.name && { name: validatedData.name }),
        ...(validatedData.avatar && { avatar: validatedData.avatar }),
        ...(validatedData.dateOfBirth && {
          dateOfBirth: new Date(validatedData.dateOfBirth),
        }),
        ...(validatedData.gender && { gender: validatedData.gender }),
        ...(validatedData.bio && { bio: validatedData.bio }),
      },
    });

    // Ako je student i ima podatke za studenta
    if (validatedData.school || validatedData.grade) {
      const student = await prisma.student.findFirst({
        where: { userId: session.user.id },
      });

      if (student) {
        await prisma.student.update({
          where: { id: student.id },
          data: {
            ...(validatedData.school && { school: validatedData.school }),
            ...(validatedData.grade && { grade: validatedData.grade }),
          },
        });
      }
    }

    log.info("Updated profile", {
      userId: session.user.id,
      fields: Object.keys(validatedData),
    });

    return successResponse({
      id: updated.id,
      name: updated.name,
      email: updated.email,
      avatar: updated.avatar,
      dateOfBirth: updated.dateOfBirth,
      gender: updated.gender,
      bio: updated.bio,
    });
  } catch (error) {
    return handleAPIError(error);
  }
}

/**
 * POST /api/profile
 * Mijenja šifru korisnika
 */
export async function POST(request: NextRequest) {
  try {
    // Autentifikacija
    const session = await auth();
    if (!session?.user?.id) {
      throw new AuthenticationError();
    }

    // Parse body
    const body = await request.json();

    // Validacija
    const validatedData = ChangePasswordSchema.parse(body);

    // Dohvati korisnika
    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
    });

    if (!user) {
      throw new NotFoundError("Korisnik");
    }

    // Provjeri trenutnu šifru
    if (
      !user.password ||
      !(await bcrypt.compare(validatedData.currentPassword, user.password))
    ) {
      throw new ValidationError("Trenutna šifra nije ispravna");
    }

    // Hash novu šifru
    const hashedPassword = await bcrypt.hash(validatedData.newPassword, 10);

    // Ažuriraj šifru
    await prisma.user.update({
      where: { id: session.user.id },
      data: {
        password: hashedPassword,
      },
    });

    log.info("Changed password", {
      userId: session.user.id,
    });

    return createdResponse({ success: true }, "Šifra je uspješno promijenjena");
  } catch (error) {
    return handleAPIError(error);
  }
}
